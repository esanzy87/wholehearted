{"version":3,"sources":["components/LandingPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LandingPage","className","style","position","width","top","zIndex","height","Container","Row","Col","href","id","paddingTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLA8EeA,MArEf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,aAAaC,MAAO,CAACC,SAAU,QAASC,MAAO,OAAQC,IAAK,IAAKC,OAAQ,GAAIC,OAAO,GAAD,OAPrF,IAOqF,QACnG,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6CACA,uBAAGC,KAAK,WAAR,UAFF,MAEiC,uBAAGA,KAAK,aAAR,YAFjC,MAEoE,uBAAGA,KAAK,eAAR,cAFpE,MAE2G,uBAAGA,KAAK,eAAR,kBAKjH,8BACE,kBAACH,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BAASE,GAAG,SAASV,MAAO,CAACK,OAAO,GAAD,OAtB1B,IAsB0B,MAAyBM,WAAW,GAAD,OArB9D,IAqB8D,QACpE,sCACA,2FAKN,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BAASE,GAAG,WAAWV,MAAO,CAACK,OAAO,GAAD,OA/B5B,IA+B4B,MAAyBM,WAAW,GAAD,OA9BhE,IA8BgE,QACtE,wCACA,4BACE,0CACA,2CACA,iDACA,gCAAK,mCAAL,+BAMR,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BAASE,GAAG,aAAaV,MAAO,CAACK,OAAO,GAAD,OA7C9B,IA6C8B,MAAyBM,WAAW,GAAD,OA5ClE,IA4CkE,QACxE,0CACA,4BACE,qCACA,kCACA,mCACA,wDAMR,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,6BAASE,GAAG,aAAaV,MAAO,CAACK,OAAO,GAAD,OA3D9B,IA2D8B,MAAyBM,WAAW,GAAD,OA1DlE,IA0DkE,QACxE,0CACA,4BAAI,uBAAGF,KAAK,+BAAR,8BAMd,4BAAQT,MAAO,CAACK,OAAO,GAAD,OAjEN,IAiEM,WC9DbO,MAJf,WACE,OAAO,kBAAC,EAAD,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c922cd0d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Container, Row, Col} from 'reactstrap';\r\n\r\n\r\nconst SECTION_HEIGHT = 450;\r\nconst HEADER_HEIGHT = 150;\r\nconst FOOTER_HEIGHT = 700;\r\n\r\n\r\nfunction LandingPage() {\r\n  return (\r\n    <div className='app'>\r\n      <header className='app-header' style={{position: 'fixed', width: '100%', top: '0', zIndex: 10, height: `${HEADER_HEIGHT}px`}}>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <h1>Whole Hearted</h1>\r\n              <a href='#vision'>Vision</a> | <a href='#products'>Products</a> | <a href='#experience'>Experience</a> | <a href='#contact-us'>Contact Us</a>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </header>\r\n      <main>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <section id='vision' style={{height: `${SECTION_HEIGHT}px`, paddingTop: `${HEADER_HEIGHT}px`}}>\r\n                <h2>Vision</h2>\r\n                <p>To connect qualified Korean products to the global market</p>\r\n              </section>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <section id='products' style={{height: `${SECTION_HEIGHT}px`, paddingTop: `${HEADER_HEIGHT}px`}}>\r\n                <h2>Products</h2>\r\n                <ul>\r\n                  <li>IT Talents</li>\r\n                  <li>Agriculture</li>\r\n                  <li>COVID-19 Products</li>\r\n                  <li>2<sup>nd</sup> handed heavy machinery</li>\r\n                </ul>\r\n              </section>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <section id='experience' style={{height: `${SECTION_HEIGHT}px`, paddingTop: `${HEADER_HEIGHT}px`}}>\r\n                <h2>Experience</h2>\r\n                <ul>\r\n                  <li>Japan</li>\r\n                  <li>UK</li>\r\n                  <li>USA</li>\r\n                  <li>Gulf and Middle East</li>\r\n                </ul>\r\n              </section>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <section id='contact-us' style={{height: `${SECTION_HEIGHT}px`, paddingTop: `${HEADER_HEIGHT}px`}}>\r\n                <h2>Contact Us</h2>\r\n                <h3><a href='mailto:info@wholehearted.kr'>info@wholehearted.kr</a></h3>\r\n              </section>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </main>\r\n      <footer style={{height: `${FOOTER_HEIGHT}px`}}>\r\n\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LandingPage from './components/LandingPage';\n\n\nfunction App() {\n  return <LandingPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}